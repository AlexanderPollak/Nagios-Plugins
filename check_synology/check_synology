#!/bin/bash

##
#
# receive status information from Synology NAS
#
# you can get all snmp-options with:
#	snmpwalk -m ALL -v 2c -c MYCOMMUNITY MYIPADDRESS  Synology
#
# Note that you will need to install all mibs from "Synology_MIB_File.zip" in order to resolve the requests.
#
# Usage:
#	./check_synology -h IP-ADDRESS -c SNMP-COMMUNITY -s STATUSCHECK
#
#
# Tested with DSM 7.0
#---------------------------------------------------
# Based on https://global.download.synology.com/download/Document/Software/DeveloperGuide/Firmware/DSM/All/enu/Synology_DiskStation_MIB_Guide.pdf
#---------------------------------------------------
# actual number disk limit = 52 disks per Synology
#---------------------------------------------------
#
# 2023-07-13:  Version 1.0	\\ Alexander Pollak
#
##

 
SNMPWALK=$(which snmpwalk)
SNMPGET=$(which snmpget)

SNMPVersion="3"
SNMPV2Community="public"
SNMPTimeout="10"
SNMPPort="161"



#OID declarations
OID_syno="syno"												#OID="1.3.6.1.4.1.6574"
OID_model="modelName.0"										#OID="1.3.6.1.4.1.6574.1.5.1.0"
OID_serialNumber="serialNumber.0"							#OID="1.3.6.1.4.1.6574.1.5.2.0"
OID_DSMVersion="version.0"									#OID="1.3.6.1.4.1.6574.1.5.3.0"
OID_DSMUpgradeAvailable="upgradeAvailable.0"				#OID="1.3.6.1.4.1.6574.1.5.4.0"
OID_systemStatus="systemStatus.0"							#OID="1.3.6.1.4.1.6574.1.1.0"
OID_temperature="temperature.0"								#OID="1.3.6.1.4.1.6574.1.2.0"
OID_powerStatus="powerStatus.0"								#OID="1.3.6.1.4.1.6574.1.3.0"
OID_systemFanStatus="systemFanStatus.0"						#OID="1.3.6.1.4.1.6574.1.4.1.0"
OID_CPUFanStatus="cpuFanStatus.0"							#OID="1.3.6.1.4.1.6574.1.4.2.0"



OID_diskID="diskID"											#OID="1.3.6.1.4.1.6574.2.1.1.2"
OID_diskModel="diskModel"									#OID="1.3.6.1.4.1.6574.2.1.1.3"
OID_diskStatus="diskStatus"									#OID="1.3.6.1.4.1.6574.2.1.1.5"
OID_diskTemp="diskTemperature"								#OID="1.3.6.1.4.1.6574.2.1.1.6"

OID_RAID=""
OID_RAIDName="raidName"										#OID="1.3.6.1.4.1.6574.3.1.1.2"
OID_RAIDStatus="raidStatus"									#OID="1.3.6.1.4.1.6574.3.1.1.3"

OID_Storage="hrStorageEntry"								#OID="1.3.6.1.2.1.25.2.3.1"
OID_StorageDesc="hrStorageDescr.53"							#OID="1.3.6.1.2.1.25.2.3.1.3" [.53 to select /volume1]
OID_StorageAllocationUnits="hrStorageAllocationUnits.53"	#OID="1.3.6.1.2.1.25.2.3.1.4" [.53 to select /volume1]
OID_StorageSize="hrStorageSize.53"							#OID="1.3.6.1.2.1.25.2.3.1.5" [.53 to select /volume1]
OID_StorageSizeUsed="hrStorageUsed.53"						#OID="1.3.6.1.2.1.25.2.3.1.6" [.53 to select /volume1]

OID_UpsModel="upsDeviceModel.0"								#OID="1.3.6.1.4.1.6574.4.1.1.0"
OID_UpsSN="upsDeviceSerial.0"								#OID="1.3.6.1.4.1.6574.4.1.3.0"
OID_UpsStatus="upsInfoStatus.0"								#OID="1.3.6.1.4.1.6574.4.2.1.0"
OID_UpsLoad="upsInfoLoadValue.0"							#OID="1.3.6.1.4.1.6574.4.2.12.1.0"
OID_UpsBatteryCharge="upsBatteryChargeValue.0"				#OID="1.3.6.1.4.1.6574.4.3.1.1.0"
OID_UpsBatteryChargeWarning="upsBatteryChargeWarning.0"		#OID="1.3.6.1.4.1.6574.4.3.1.4.0"




# Default Values for Warning and Critical Checks:
warningTemperature="50"
criticalTemperature="60"
warningStorage="80"
criticalStorage="95"

# nagios return values
export STATE_OK=0
export STATE_WARNING=1
export STATE_CRITICAL=2
export STATE_UNKNOWN=3
export STATE_DEPENDENT=4

intReturn=$STATE_OK

usage()
{
        echo "usage: ./check_synology [OPTIONS] -U [user] -P [pass] -h [hostname] -s [check]"
        echo "options:"
        echo "	-U [snmp username]     Username for SNMPv3"
        echo "	-P [snmp password]     Password for SNMPv3"
        echo ""
        echo "	-2 [community name]    Use SNMPv2 (no need user/password) & define community name (ex: public)"
        echo ""
        echo "	-h [hostname or IP]    Hostname or IP. You can also define a different port"
        echo "	-p [snmp port]         Port for snmp request (default: 161)"
        echo ""
        echo "	-s  [check]           Check to be executed"
        echo "	    info              Show System Infos"
        echo "	    dev_status        Check Device Status"
        echo "	    dev_temp          Check Device Temperature"
        echo "	    disk_status       Check Status for All Disks"  
        echo "	    disk_temp         Check Temperature for All Disks"        
        echo "	    raid              Check RAID"
        echo "	    usage             Check Storage Usage"
        echo "	    update            Check for DSM updates"
        echo "	    ups               Show informations about the connected UPS (only information, not tested)"
        echo ""
        echo "	-W [warning temp]      Warning temperature (for disks & synology) (default $warningTemperature)"
        echo "	-C [critical temp]     Critical temperature (for disks & synology) (default $criticalTemperature)"
        echo ""
        echo "	-w [warning %]         Warning storage usage percentage (default $warningStorage)"
        echo "	-c [critical %]        Critical storage usage percentage (default $criticalStorage)"
        echo ""
        echo ""
        echo "examples:	./check_synology -u admin -p 1234 -h 10.1.10.70 -s info"	
        echo "	     	./check_synology -u admin -p 1234 -h nas.org -s raid "	
        echo "		./check_synology -2 public -h 10.1.10.70 -p 5300 -s disk_status"	
        exit 3
}




if [ "$1" == "--help" ]; then
    usage; exit 0
fi

while getopts 2:W:C:w:c:U:P:h:p:s: OPTNAME; do
	case "$OPTNAME" in
	U)	SNMPUser="$OPTARG";;
	P)	SNMPPassword="$OPTARG";;
	h)	hostname="$OPTARG";;
	p)	SNMPPort="$OPTARG";;
	2)	SNMPVersion="2"
		SNMPV2Community="$OPTARG";;
	w)	warningStorage="$OPTARG";;
	c)	criticalStorage="$OPTARG";;
	W)	warningTemperature="$OPTARG";;
	C)	criticalTemperature="$OPTARG";;
	s)	status="$OPTARG";;
	*)	usage;;
        esac
done

if [ "$warningTemperature" -gt "$criticalTemperature" ] ; then
    echo "Critical temperature must be higher than warning temperature"
    echo "Warning temperature: $warningTemperature"
    echo "Critical temperature: $criticalTemperature"
    echo ""
    echo "For more information:  ./${0##*/} --help" 
    exit 1 
fi

if [ "$warningStorage" -gt "$criticalStorage" ] ; then
    echo "The Critical storage usage percentage  must be higher than the warning storage usage percentage"
    echo "Warning: $warningStorage"
    echo "Critical: $criticalStorage"
    echo ""
    echo "For more information:  ./${0##*/} --help"
    exit 1
fi






if [ "$hostname" = "" ] || ([ "$SNMPVersion" = "3" ] && [ "$SNMPUser" = "" ]) || ([ "$SNMPVersion" = "3" ] && [ "$SNMPPassword" = "" ]) ; then
	usage
else
	if [ "$SNMPVersion" = "2" ] ; then
		SNMPArgs=" -v 2c -c $SNMPV2Community -t $SNMPTimeout"
	else
		SNMPArgs=" -v 3 -u $SNMPUser -A $SNMPPassword -l authNoPriv -a MD5 -t $SNMPTimeout"
		if [ ${#SNMPPassword} -lt "8" ] ; then
			echo "snmpwalk:  (The supplied password is too short.)"
			exit 1
		fi
	fi

	case "$status" in

		info)
			# Display Information about NAS
			tmpRequest=`$SNMPWALK $SNMPArgs $hostname $OID_syno 2> /dev/null`
			if [ "$?" != "0" ] ; then
				output="CRITICAL - Problem with SNMP request, check user/password/host"
				intReturn=$STATE_CRITICAL;
			else	
				nbDisk=$(echo "$tmpRequest" | grep $OID_diskID | wc -l)
			fi
			syno=`$SNMPGET $SNMPArgs $hostname $OID_diskID $OID_model $OID_serialNumber $OID_DSMVersion $OID_systemStatus $OID_temperature $OID_powerStatus $OID_systemFanStatus $OID_CPUFanStatus $OID_DSMUpgradeAvailable 2> /dev/null`
			if [ "$?" != "0" ] ; then
				output="CRITICAL - Problem with SNMP request, check user/password/host"
				intReturn=$STATE_CRITICAL ;
			else
				model=$(echo "$syno" | grep "$OID_model" | sed 's/.*"\(.*\)".*/\1/')
				serialNumber=$(echo "$syno" | grep "$OID_serialNumber" | sed 's/.*"\(.*\)".*/\1/')
				DSMVersion=$(echo "$syno" | grep "$OID_DSMVersion" | sed 's/.*"\(.*\)".*/\1/')
				DSMUpgradeAvailable=$(echo "$syno" | grep "$OID_DSMUpgradeAvailable" | sed 's/.*INTEGER: \(.*\).*/\1/')
				systemStatus=$(echo "$syno" | grep "$OID_systemStatus" | sed 's/.*INTEGER: \(.*\).*/\1/')
				temperature=$(echo "$syno" | grep "$OID_temperature" | sed 's/.*INTEGER: \(.*\).*/\1/')
				powerStatus=$(echo "$syno" | grep $OID_powerStatus | sed 's/.*INTEGER: \(.*\).*/\1/')
				systemFanStatus=$(echo "$syno" | grep $OID_systemFanStatus | sed 's/.*INTEGER: \(.*\).*/\1/')
				CPUFanStatus=$(echo "$syno" | grep $OID_CPUFanStatus | sed 's/.*INTEGER: \(.*\).*/\1/')


				# Convert Return to String
				if [ "$systemStatus" != "" ] ; then
					case $systemStatus in
					1)	systemStatus="Normal";;
					2)	systemStatus="Failed";;
					*)	systemStatus="UNKNOWN";;
					esac
				fi
				# Convert Return to String
				if [ "$$DSMUpgradeAvailable" != "" ] ; then
					case $DSMUpgradeAvailable in
					1)	DSMUpgradeAvailable="Available";;
					2)	DSMUpgradeAvailable="Unavailable";;
					3)	DSMUpgradeAvailable="Connecting";;					
					4)	DSMUpgradeAvailable="Disconnected";;
					5)	DSMUpgradeAvailable="Others";;
					*)	DSMUpgradeAvailable="UNKNOWN";;
					esac
				fi
				# Convert Return to String
				if [ "$powerStatus" != "" ] ; then
					case $powerStatus in
					1)	powerStatus="Normal";;
					2)	powerStatus="Failed";;
					*)	powerStatus="UNKNOWN";;
					esac
				fi
				# Convert Return to String
				if [ "$systemFanStatus" != "" ] ; then
					case $systemFanStatus in
					1)	systemFanStatus="Normal";;
					2)	systemFanStatus="Failed";;
					*)	systemFanStatus="UNKNOWN";;
					esac
				fi
				# Convert Return to String
				if [ "$CPUFanStatus" != "" ] ; then
					case $CPUFanStatus in
					1)	CPUFanStatus="Normal";;
					2)	CPUFanStatus="Failed";;
					*)	CPUFanStatus="UNKNOWN";;
					esac
				fi

				# Return Information
				if [ "$model" != "" ] ; then
					output=$output"Synology model:  -  "$model"\n"
				fi
				if [ "$serialNumber" != "" ] ; then
					output=$output"Synology s/n:  -  "$serialNumber"\n"
				fi
				if [ "$DSMVersion" != "" ] ; then
					output=$output"DSM Version:  -  "$DSMVersion"\n"
				fi
				if [ "$DSMUpgradeAvailable" != "" ] ; then
					output=$output"DSM update:  -  "$DSMUpgradeAvailable"\n"
				fi
				if [ "$systemStatus" != "" ] ; then
					output=$output"System Status:  -  "$systemStatus"\n"
				fi
				if [ "$temperature" != "" ] ; then
					output=$output"System Temperature:  -  "$temperature"degC\n"
				fi
				if [ "$powerStatus" != "" ] ; then
					output=$output"Power Status:  -  "$powerStatus"\n"
				fi
				if [ "$systemFanStatus" != "" ] ; then
					output=$output"System Fan Status:  -  "$systemFanStatus"\n"
				fi
				if [ "$CPUFanStatus" != "" ] ; then
					output=$output"CPU Fan Status:  -  "$CPUFanStatus"\n"
				fi
				if [ "$nbDisk" != "" ] ; then
					output=$output"Number of disks:  -  "$nbDisk""
				fi

				if [ "$output" == "" ] ; then
					output="No information returned"
					intReturn=$STATE_WARNING
				fi
			fi
		;;	

 	
		dev_status)
			# Check Device Status
			syno=`$SNMPGET $SNMPArgs $hostname $OID_systemStatus $OID_powerStatus $OID_systemFanStatus $OID_CPUFanStatus 2> /dev/null`
			if [ "$?" != "0" ] ; then
				output="CRITICAL - Problem with SNMP request, check user/password/host"
				intReturn=$STATE_CRITICAL ;
			else
				systemStatus=$(echo "$syno" | grep "$OID_systemStatus" | sed 's/.*INTEGER: \(.*\).*/\1/')
				powerStatus=$(echo "$syno" | grep $OID_powerStatus | sed 's/.*INTEGER: \(.*\).*/\1/')
				systemFanStatus=$(echo "$syno" | grep $OID_systemFanStatus | sed 's/.*INTEGER: \(.*\).*/\1/')
				CPUFanStatus=$(echo "$syno" | grep $OID_CPUFanStatus | sed 's/.*INTEGER: \(.*\).*/\1/')

				# Convert System Status Return to String
				if [ "$systemStatus" != "" ] ; then
					case $systemStatus in
					1)	systemStatus="Normal";;
					2)	systemStatus="Failed";	output=$output"System Status: Failure\n"; intReturn=$STATE_CRITICAL;;
					*)	systemStatus="UNKNOWN";	output=$output"System Status: UNKNOWN\n";;
					esac
				fi
				# Convert Power Status Return to String
				if [ "$powerStatus" != "" ] ; then
					case $powerStatus in
					1)	powerStatus="Normal";;
					2)	powerStatus="Failed";	output=$output"Power Status: Failure\n"; intReturn=$STATE_CRITICAL;;
					*)	powerStatus="UNKNOWN";	output=$output"Power Status: UNKNOWN\n";;
					esac
				fi
				# Convert System Fan Status Return to String
				if [ "$systemFanStatus" != "" ] ; then
					case $systemFanStatus in
					1)	systemFanStatus="Normal";;
					2)	systemFanStatus="Failed";	output=$output"System Fan Status: Failure\n"; intReturn=$STATE_CRITICAL;;
					*)	systemFanStatus="UNKNOWN";	output=$output"System Fan Status: UNKNOWN\n";;
					esac
				fi
				# Convert CPU Fan Status Return to String
				if [ "$CPUFanStatus" != "" ] ; then
					case $CPUFanStatus in
					1)	CPUFanStatus="Normal";;
					2)	CPUFanStatus="Failed"; 		output=$output"CPU Fan Status: Failure\n"; intReturn=$STATE_CRITICAL;;
					*)	CPUFanStatus="UNKNOWN";		output=$output"CPU Fan Status: UNKNOWN\n";;
					esac
				fi
				if [ "$output" != "" ]&&[ "$intReturn" == "$STATE_OK" ] ; then
					output=${output:0:${#output}-2}
					intReturn=$STATE_UNKNOWN
				fi	
				if [ "$output" != "" ]&&[ "$intReturn" == "$STATE_CRITICAL" ] ; then
					output=${output:0:${#output}-2}
				fi	
				if [ "$output" == "" ] ; then
					output="System Satus: OK"
					intReturn=$STATE_OK
				fi
			fi
		;;	


		dev_temp)
			# Check System Temperature
			syno=`$SNMPGET $SNMPArgs $hostname $OID_temperature 2> /dev/null`
			if [ "$?" != "0" ] ; then
				output="CRITICAL - Problem with SNMP request, check user/password/host"
				intReturn=$STATE_CRITICAL ;
			else
				temperature=$(echo "$syno" | grep "$OID_temperature" | sed 's/.*INTEGER: \(.*\).*/\1/')


				if [ "$temperature" != "" ] ; then
					if [ "$temperature" -le "$warningTemperature" ] ; then
						output="OK - System Temperature: "$temperature"degC"
						intReturn=$STATE_OK ;
					fi
					if [ "$temperature" -gt "$warningTemperature" ]&&[ "$temperature" -le "$criticalTemperature" ] ; then
						output="WARNING - System Temperature above warning threshold of "$warningTemperature"degC:  Temperature="$temperature"degC"
						intReturn=$STATE_WARNING ;
					fi
					if [ "$temperature" -gt "$warningTemperature" ]&&[ "$temperature" -gt "$criticalTemperature" ] ; then
						output="CRITICAL - System Temperature above critical threshold of "$criticalTemperature"degC:  Temperature="$temperature"degC"
						intReturn=$STATE_CRITICAL ;
					fi
				else
					output="WARNING - No System Temperature Information Returned"
					intReturn=$STATE_WARNING
				fi
			fi
		;;	


		ups)
			# Display Information about UPS (not tested)
			syno=`$SNMPGET $SNMPArgs $hostname $OID_UpsModel $OID_UpsSN $OID_UpsStatus $OID_UpsLoad $OID_UpsBatteryCharge $OID_UpsBatteryChargeWarning 2> /dev/null`
			if [ "$?" != "0" ] ; then
				output="CRITICAL - Problem with SNMP request, check user/password/host"
				intReturn=$STATE_CRITICAL ;
			else
				upsModel=$(echo "$syno" | grep "$OID_UpsModel" | sed 's/.*"\(.*\)".*/\1/')
				upsSN=$(echo "$syno" | grep $OID_UpsSN | sed 's/.*"\(.*\)".*/\1/')
				upsStatus=$(echo "$syno" | grep $OID_UpsStatus | sed 's/.*"\(.*\)".*/\1/')
				upsLoad=$(echo "$syno" | grep $OID_UpsLoad | sed 's/.*Gauge32: \(.*\).*/\1/')
				upsBatteryCharge=$(echo "$syno" | grep $OID_UpsBatteryCharge | sed 's/.*Gauge32: \(.*\).*/\1/')
				upsBatteryChargeWarning=$(echo "$syno" | grep $OID_UpsBatteryChargeWarning | sed 's/.*Gauge32: \(.*\).*/\1/')



				# Return Information
				if [ "$upsModel" != "" ] ; then
					output=$output"UPS model:		"$upsModel"\n"
				fi
				if [ "$upsSN" != "" ] ; then
					output=$output"UPS s/n:		"$upsSN"\n"
				fi
				if [ "$upsStatus" != "" ] ; then
					output=$output"UPS Status:		"$upsStatus"\n"
				fi
				if [ "$upsLoad" != "" ] ; then
					output=$output"UPS Load:		"$upsLoad"%\n"
				fi
				if [ "$upsBatteryCharge" != "" ] ; then
					output=$output"UPS Battery Charge:		 "$upsBatteryCharge"%\n"
				fi
				if [ "$upsBatteryChargeWarning" != "" ] ; then
					output=$output"UPS Battery Charge Warning:		 "$upsBatteryChargeWarning"%\n"
				fi
				if [ "$output" == "" ] ; then
					output="No information returned"
					intReturn=$STATE_WARNING
				fi
			fi
		;;	




		raid)
			# Check RAID
			tmpRequest=`$SNMPWALK $SNMPArgs $hostname $OID_syno 2> /dev/null`
			if [ "$?" != "0" ] ; then
				output="CRITICAL - Problem with SNMP request, check user/password/host"
				intReturn=$STATE_CRITICAL ;
			else
				nbRAID=$(echo "$tmpRequest" | grep $OID_RAIDName | wc -l)

				for i in `seq 1 $nbRAID`; do
					OID_RAID="$OID_RAID $OID_RAIDName.$(($i-1)) $OID_RAIDStatus.$(($i-1))" 
				done
				syno=`$SNMPGET $SNMPArgs $hostname $OID_RAID 2> /dev/null`
				if [ "$?" != "0" ] ; then
					output="CRITICAL - Problem with SNMP request, check user/password/host"
					intReturn=$STATE_CRITICAL ;
				fi


				#Check all RAID volume status
				forReturn=$STATE_OK

				for i in `seq 1 $nbRAID`; do
					RAIDName[$i]=$(echo "$syno" | grep $OID_RAIDName.$(($i-1)) | sed 's/.*"\(.*\)".*/\1/')
					RAIDStatus[$i]=$(echo "$syno" | grep $OID_RAIDStatus.$(($i-1)) | sed 's/.*INTEGER: \(.*\).*/\1/')

					case ${RAIDStatus[$i]} in
						1)	RAIDStatus[$i]="Normal";				forReturn=$STATE_OK; 					output=$output"RAID status (${RAIDName[$i]}): ${RAIDStatus[$i]}\n";;
						2)	RAIDStatus[$i]="Repairing";				forReturn=$STATE_CRITICAL;				output=$output"RAID status (${RAIDName[$i]}): ${RAIDStatus[$i]}\n";;
						3)	RAIDStatus[$i]="Migrating";				forReturn=$STATE_WARNING;				output=$output"RAID status (${RAIDName[$i]}): ${RAIDStatus[$i]}\n";;
						4)	RAIDStatus[$i]="Expanding";				forReturn=$STATE_WARNING;				output=$output"RAID status (${RAIDName[$i]}): ${RAIDStatus[$i]}\n";;
						5)	RAIDStatus[$i]="Deleting";				forReturn=$STATE_CRITICAL;				output=$output"RAID status (${RAIDName[$i]}): ${RAIDStatus[$i]}\n";;				
						6)	RAIDStatus[$i]="Creating";				forReturn=$STATE_WARNING;				output=$output"RAID status (${RAIDName[$i]}): ${RAIDStatus[$i]}\n";;
						7)	RAIDStatus[$i]="RaidSyncing";			forReturn=$STATE_WARNING;				output=$output"RAID status (${RAIDName[$i]}): ${RAIDStatus[$i]}\n";;
						8)	RAIDStatus[$i]="RaidParityChecking";	forReturn=$STATE_OK;					output=$output"RAID status (${RAIDName[$i]}): ${RAIDStatus[$i]}\n";;
						9)	RAIDStatus[$i]="RaidAssembling";		forReturn=$STATE_WARNING;				output=$output"RAID status (${RAIDName[$i]}): ${RAIDStatus[$i]}\n";;
						10)	RAIDStatus[$i]="Canceling";				forReturn=$STATE_CRITICAL;				output=$output"RAID status (${RAIDName[$i]}): ${RAIDStatus[$i]}\n";;
						11)	RAIDStatus[$i]="Degraded";				forReturn=$STATE_CRITICAL;				output=$output"RAID status (${RAIDName[$i]}): ${RAIDStatus[$i]}\n";;
						12)	RAIDStatus[$i]="Crashed";				forReturn=$STATE_CRITICAL;				output=$output"RAID status (${RAIDName[$i]}): ${RAIDStatus[$i]}\n";;
					esac
	
					if [ "$forReturn" == "$STATE_WARNING" ]&&[ "$intReturn" == "$STATE_OK" ] ; then
						intReturn=$STATE_WARNING;
					fi	
					if [ "$forReturn" == "$STATE_CRITICAL" ]&&[ "$intReturn" == "$STATE_OK" ] ; then
						intReturn=$STATE_CRITICAL;
					fi	
					if [ "$forReturn" == "$STATE_CRITICAL" ]&&[ "$intReturn" == "$STATE_WARNING" ] ; then
						intReturn=$STATE_CRITICAL;
					fi	
				done
			fi
			if [ "$output" == "" ] ; then
				output="No information returned"
				intReturn=$STATE_WARNING
			else
				output=${output:0:${#output}-2}
			fi
		;;


		disk_status)
			# Check DISK Status
			tmpRequest=`$SNMPWALK $SNMPArgs $hostname $OID_syno 2> /dev/null`
			if [ "$?" != "0" ] ; then
				output="CRITICAL - Problem with SNMP request, check user/password/host"
				intReturn=$STATE_CRITICAL ;
			else
				nbDisk=$(echo "$tmpRequest" | grep $OID_diskID | wc -l)
				
				for i in `seq 1 $nbDisk`; do
					if [ $i -lt 25 ] ; then
						OID_disk="$OID_disk $OID_diskID.$(($i-1)) $OID_diskModel.$(($i-1)) $OID_diskStatus.$(($i-1)) $OID_diskTemp.$(($i-1)) " 
					else
						OID_disk2="$OID_disk2 $OID_diskID.$(($i-1)) $OID_diskModel.$(($i-1)) $OID_diskStatus.$(($i-1)) $OID_diskTemp.$(($i-1)) "
					fi   
				done

				syno=`$SNMPGET $SNMPArgs $hostname $OID_disk 2> /dev/null`
				if [ "$?" != "0" ] ; then
					output="CRITICAL - Problem with SNMP request, check user/password/host"
					intReturn=$STATE_CRITICAL ;
				fi
				if [ "$OID_disk2" != "" ]; then
					syno2=`$SNMPGET $SNMPArgs $hostname $OID_disk2 2> /dev/null`
					syno=$(echo "$syno";echo "$syno2";)
				fi

				#Check all Disk status
				forReturn=$STATE_OK

				for i in `seq 1 $nbDisk`; do
					diskID[$i]=$(echo "$syno" | grep "$OID_diskID.$(($i-1)) " | sed 's/.*"\(.*\)".*/\1/')
					diskModel[$i]=$(echo "$syno" | grep "$OID_diskModel.$(($i-1)) " | sed 's/.*"\(.*\)".*/\1/')
					diskStatus[$i]=$(echo "$syno" | grep "$OID_diskStatus.$(($i-1)) " | sed 's/.*INTEGER: \(.*\).*/\1/')

					case ${diskStatus[$i]} in
						1)	diskStatus[$i]="Normal";				forReturn=$STATE_OK;		output=$output"DISK status (${diskID[$i]}): ${diskStatus[$i]}\n";;
						2)	diskStatus[$i]="Initialized";			forReturn=$STATE_OK;		output=$output"DISK status (${diskID[$i]}): ${diskStatus[$i]}\n";;
						3)	diskStatus[$i]="NotInitialized";		forReturn=$STATE_WARNING;	output=$output"DISK status (${diskID[$i]}): ${diskStatus[$i]}\n";;
						4)	diskStatus[$i]="SystemPartitionFailed";	forReturn=$STATE_CRITICAL;	output=$output"DISK status (${diskID[$i]}): ${diskStatus[$i]}\n";;
						5)	diskStatus[$i]="Crashed";				forReturn=$STATE_CRITICAL;	output=$output"DISK status (${diskID[$i]}): ${diskStatus[$i]}\n";;
					esac
					
					if [ "$forReturn" == "$STATE_WARNING" ]&&[ "$intReturn" == "$STATE_OK" ] ; then
						intReturn=$STATE_WARNING;
					fi	
					if [ "$forReturn" == "$STATE_CRITICAL" ]&&[ "$intReturn" == "$STATE_OK" ] ; then				
						intReturn=$STATE_CRITICAL;
					fi	
					if [ "$forReturn" == "$STATE_CRITICAL" ]&&[ "$intReturn" == "$STATE_WARNING" ] ; then
						intReturn=$STATE_CRITICAL;
					fi	
				done
			fi
			if [ "$output" == "" ] ; then
				output="No information returned"
				intReturn=$STATE_WARNING
			else
				output=${output:0:${#output}-2}
			fi
		;;



		disk_temp)
			# Check DISK Temperature
			tmpRequest=`$SNMPWALK $SNMPArgs $hostname $OID_syno 2> /dev/null`
			if [ "$?" != "0" ] ; then
				output="CRITICAL - Problem with SNMP request, check user/password/host"
				intReturn=$STATE_CRITICAL ;
			else
				nbDisk=$(echo "$tmpRequest" | grep $OID_diskID | wc -l)
				
				for i in `seq 1 $nbDisk`; do
					if [ $i -lt 25 ] ; then
						OID_disk="$OID_disk $OID_diskID.$(($i-1)) $OID_diskModel.$(($i-1)) $OID_diskStatus.$(($i-1)) $OID_diskTemp.$(($i-1)) " 
					else
						OID_disk2="$OID_disk2 $OID_diskID.$(($i-1)) $OID_diskModel.$(($i-1)) $OID_diskStatus.$(($i-1)) $OID_diskTemp.$(($i-1)) "
					fi   
				done

				syno=`$SNMPGET $SNMPArgs $hostname $OID_disk 2> /dev/null`
				if [ "$?" != "0" ] ; then
					output="CRITICAL - Problem with SNMP request, check user/password/host"
					intReturn=$STATE_CRITICAL ;
				fi
				if [ "$OID_disk2" != "" ]; then
					syno2=`$SNMPGET $SNMPArgs $hostname $OID_disk2 2> /dev/null`
					syno=$(echo "$syno";echo "$syno2";)
				fi

				#Check all Disk status
				forReturn=$STATE_OK

				for i in `seq 1 $nbDisk`; do
					diskID[$i]=$(echo "$syno" | grep "$OID_diskID.$(($i-1)) " | sed 's/.*"\(.*\)".*/\1/')
					diskTemp[$i]=$(echo "$syno" | grep "$OID_diskTemp.$(($i-1)) " | sed 's/.*INTEGER: \(.*\).*/\1/')


					if [ "${diskTemp[$i]}" -le "$warningTemperature" ] ; then
						output=$output"(${diskID[$i]}) Temperature: ${diskTemp[$i]}degC\n"
						forReturn=$STATE_OK ;
					fi
					if [ "${diskTemp[$i]}" -gt "$warningTemperature" ]&&[ "${diskTemp[$i]}" -le "$criticalTemperature" ] ; then
						output=$output"(${diskID[$i]}) Temperature above warning threshold of "$warningTemperature"degC: ${diskTemp[$i]}degC\n"
						forReturn=$STATE_WARNING ;
					fi
					if [ "${diskTemp[$i]}" -gt "$warningTemperature" ]&&[ "${diskTemp[$i]}" -gt "$criticalTemperature" ] ; then
						output=$output"(${diskID[$i]}) Temperature above critical threshold of "$criticalTemperature"degC: ${diskTemp[$i]}degC\n"
						forReturn=$STATE_CRITICAL ;
					fi

					if [ "$forReturn" == "$STATE_WARNING" ]&&[ "$intReturn" == "$STATE_OK" ] ; then
						intReturn=$STATE_WARNING;
					fi	
					if [ "$forReturn" == "$STATE_CRITICAL" ]&&[ "$intReturn" == "$STATE_OK" ] ; then
						intReturn=$STATE_CRITICAL;
					fi	
					if [ "$forReturn" == "$STATE_CRITICAL" ]&&[ "$intReturn" == "$STATE_WARNING" ] ; then
						intReturn=$STATE_CRITICAL;
					fi	
				done
			fi
			if [ "$output" == "" ] ; then
				output="No information returned"
				intReturn=$STATE_WARNING
			else
				output=${output:0:${#output}-2}
			fi
		;;


		update)
			# Check for Updates
			syno=`$SNMPGET $SNMPArgs $hostname $OID_DSMUpgradeAvailable 2> /dev/null`
			if [ "$?" != "0" ] ; then
				output="CRITICAL - Problem with SNMP request, check user/password/host"
				intReturn=$STATE_CRITICAL ;
			else
				DSMUpgradeAvailable=$(echo "$syno" | grep "$OID_DSMUpgradeAvailable" | sed 's/.*INTEGER: \(.*\).*/\1/')

				# Convert Return to String
				if [ "$$DSMUpgradeAvailable" != "" ] ; then
					case $DSMUpgradeAvailable in
					1)	DSMUpgradeAvailable="Available" 		forReturn=$STATE_WARNING;		output=$output"DSM update: $DSMUpgradeAvailable";;
					2)	DSMUpgradeAvailable="Unavailable"		forReturn=$STATE_OK;			output=$output"DSM update: $DSMUpgradeAvailable";;
					3)	DSMUpgradeAvailable="Connecting"		forReturn=$STATE_OK;			output=$output"DSM update: $DSMUpgradeAvailable";;					
					4)	DSMUpgradeAvailable="Disconnected"		forReturn=$STATE_WARNING;		output=$output"DSM update: $DSMUpgradeAvailable";;
					5)	DSMUpgradeAvailable="Others"			forReturn=$STATE_WARNING;		output=$output"DSM update: $DSMUpgradeAvailable";;
					*)	DSMUpgradeAvailable="UNKNOWN"			forReturn=$STATE_WARNING;		output=$output"DSM update: $DSMUpgradeAvailable";;
					esac
				fi
			fi
		;;	


		usage)
			# Check System Temperature
			syno=`$SNMPGET $SNMPArgs $hostname $OID_StorageSizeUsed $OID_StorageSize $OID_StorageDesc $OID_StorageAllocationUnits  2> /dev/null`
			if [ "$?" != "0" ] ; then
				output="CRITICAL - Problem with SNMP request, check user/password/host"
				intReturn=$STATE_CRITICAL ;
			else
				StorageAllocationUnits=$(echo "$syno" | grep "$OID_StorageAllocationUnits" | sed 's/.*INTEGER: \(.*\).* Bytes/\1/')
				StorageSizeUsed=$(echo "$syno" | grep "$OID_StorageSizeUsed" | sed 's/.*INTEGER: \(.*\).*/\1/')
				StorageSize=$(echo "$syno" | grep "$OID_StorageSize" | sed 's/.*INTEGER: \(.*\).*/\1/')
				StorageDesc=$(echo "$syno" | grep "$OID_StorageDesc" | sed 's/.*STRING: \(.*\).*/\1/')

				#Calculate total size based on StorageSize register and AllocationUnits 
				StorageSizeUsed_B=$(echo $((StorageSizeUsed * StorageAllocationUnits)))
				StorageSize_B=$(echo $((StorageSize * StorageAllocationUnits)))
				#Convert from bytes to TB
				StorageSizeUsed_TB=$(echo "scale=1;$StorageSizeUsed_B / 1000000000000" | bc)
				StorageSize_TB=$(echo "scale=1;$StorageSize_B / 1000000000000" | bc)
				#Calculate used space in Percentage
				tmp=$(echo "scale=1; 100 / $StorageSize_TB" | bc)
				StoragePercentUsed=$(echo "scale=1; $tmp * $StorageSizeUsed_TB" | bc)		
				StorageUsed=$(echo "scale=0; $StoragePercentUsed / 1" | bc)	

				if [ "$StorageUsed" != "" ] ; then
					if [ "$StorageUsed" -le "$warningStorage" ] ; then
						output="OK - Storage Capacity ["$StorageDesc"]: "$StorageSize_TB"TB, of it used: "$StoragePercentUsed"%"
						intReturn=$STATE_OK ;
					fi
					if [ "$StorageUsed" -gt "$warningStorage" ]&&[ "$StorageUsed" -le "$criticalStorage" ] ; then
						output="WARNING - Storage Capacity ["$StorageDesc"]: "$StorageSize_TB"TB, of it used: "$StoragePercentUsed"%"
						intReturn=$STATE_WARNING ;
					fi
					if [ "$StorageUsed" -gt "$warningStorage" ]&&[ "$StorageUsed" -gt "$criticalStorage" ] ; then
						output="CRITICAL - Storage Capacity ["$StorageDesc"]: "$StorageSize_TB"TB, of it used: "$StoragePercentUsed"%"
						intReturn=$STATE_CRITICAL ;
					fi
				else
					output="WARNING - No Storage Information Returned"
					intReturn=$STATE_WARNING
				fi
			fi
		;;	

		*)
			usage; exit 0
		;;

	esac

	echo -e $output
	exit $intReturn
fi


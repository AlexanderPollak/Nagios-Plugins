#!/bin/bash

##
#
# receive status and current information from Avtech RoomAlert 32S
#
# you can get all snmp-options with:
#	snmpwalk -m ALL -v 2c -c MYCOMMUNITY MYIPADDRESS  avtech
#
# Note that you will need to install "ROOMALERT32S.MIB" in order to resolve the requests.
#
# Usage:
#	./check_avtech_32S -h IP-ADDRESS -c SNMP-COMMUNITY -s STATUSCHECK
#
#
# 2023-06-26:  Version 1.0	\\ Alexander Pollak
# 2024-02-21:  Version 1.1  \\ Marc Jacquart
##


SYSCONTACT=''
SYSNAME=''
SYSLOCATION=''


SNMPVersion="2c"
SNMPCommunity="public"
SNMPTimeout="10"
SNMPPort="161"

# InfoList for S32
MIB_IDENTNAME="sysName.0"
MIB_IDENTLOCATION="sysLocation.0"
MIB_IDENTCONTACT="sysContact.0"
MIB_IDENTMODEL="sysDescr.0"

MIB_PREFIX="ROOMALERT32S-MIB::"
TEMP_ID="1" # .MIB file define temperature [C] for a sensor with id value 1
HUM_ID="3" # .MIB file define humidity [%] for a sensor with id value 3
	


# Default Values for Temperature Warning and Critical Checks:

T_high_warning="25"   # Temperature in degC
T_high_critical="30"  # Temperature in degC

T_low_warning="7"   # Temperature in degC
T_low_critical="5"  # Temperature in degC

H_high_warning="60"  # Humidity in %
H_high_critical="70" # Humidity in %

H_low_warning="20"  # Humidity in %
H_low_critical="10" # Humidity in %




# nagios return values
export STATE_OK=0
export STATE_WARNING=1
export STATE_CRITICAL=2
export STATE_UNKNOWN=3
export STATE_DEPENDENT=4

intReturn=$STATE_OK

usage()
{
	echo "usage: ./check_avtech_32S -h [hostname] -c [community] -s [check]"
	echo "options:"
	echo "	-h  [snmp hostname]   Hostname"
	echo "	-c  [community name]  Community name (default: public)"
	echo "	-p  [snmp port]       Port for snmp request (default: 161)"
	echo "	-t  [timeout]	      Duration before doing an timeout in seconds (default: 10s)"
	echo ""
	echo "	-d  [sensor number]   Sensor id number to check [0-8]"
	echo "                        0 is for the internal sensor"
	echo "                        This works for digital (Temp. and Hum.)"
	echo "                        and switch (flood) sensors."
	echo ""
	echo "	-s  [check]           Check to be executed"
	echo "	    info              System infos"
	echo "	    temp              Check Temperature Sensor"
	echo "	    hum               Check Humidity Sensor"
	echo "      flood             Check Flood Sensor"
	echo ""
	echo "	-A  [Temp. High warning]   Threshold for Temperature Sensor High Warning [Default: 23degC]"
	echo "	-B  [Temp. High critical]  Threshold for Temperature Sensor High Critical [Default: 25degC]"
	echo "	-C  [Temp. Low warning]    Threshold for Temperature Sensor Low Warning [Default: 7degC]"
	echo "	-D  [Temp. Low critical]   Threshold for Temperature Sensor Low Critical [Default: 5degC]"
	echo "	-E  [Hum. High warning]    Threshold for Humidity Sensor High Warning [Default: 60%]"
	echo "	-F  [Hum. High critical]   Threshold for Humidity Sensor High Critical [Default: 70%]"
	echo "	-G  [Hum. Low warning]     Threshold for Humidity Sensor Low Warning [Default: 20%]"
	echo "	-H  [Hum. Low critical]    Threshold for Humidity Sensor Low Critical [Default: 10%]"
	echo ""
	echo "examples:	./check_avtech_32S -h 1.2.3.4 -c public -s info"
	echo "		./check_avtech_32S -h 1.2.3.4 -p 4321 -c public -d 1 -s temp "
	echo "		./check_avtech_32S -h 1.2.3.4 -p 4321 -c public -d 0 -s hum "
	exit 3
}

if [ "$1" == "--help" ]; then
	usage; exit 0
fi

while getopts c:h:p:d:s:t:A:B:C:D:E:F:G:H: OPTNAME; do
	case "$OPTNAME" in
	h)	hostname="$OPTARG";;
	c)	SNMPCommunity="$OPTARG";;
	p)	SNMPPort="$OPTARG";;
	d)  sensor_number="$OPTARG";;
	s)	status="$OPTARG";;
	t)	SNMPTimeout="$OPTARG";;
	A)	T_high_warning="$OPTARG";;
	B)	T_high_critical="$OPTARG";;
	C)	T_low_warning="$OPTARG";;
	D)	T_low_critical="$OPTARG";;
	E)  H_high_warning="$OPTARG";;
	F)  H_high_critical="$OPTARG";;
	G)  H_low_warning="$OPTARG";;
	H)  H_low_critical="$OPTARG";;
	esac
done


if [ "$hostname" = "" ] || [ "$SNMPCommunity" = "" ] ; then
	usage
else
	SNMPArgs=" -v $SNMPVersion -c $SNMPCommunity -t $SNMPTimeout $hostname:$SNMPPort"

	case "$status" in

		info)
			# Information readout for 32S 
			info=`snmpget $SNMPArgs $MIB_IDENTNAME $MIB_IDENTLOCATION $MIB_IDENTCONTACT $MIB_IDENTMODEL 2> /dev/null`
			if [ "$?" != "0" ] ; then
				output=$output"CRITICAL - Problem with SNMP request, check user/password/host"
				intReturn=$STATE_CRITICAL ;
			else

				SYSMODEL=$(echo "$info" | grep "$MIB_IDENTMODEL" | sed 's/.*"\(.*\)".*/\1/')
				SYSCONTACT=$(echo "$info" | grep "$MIB_IDENTCONTACT" | sed 's/.*"\(.*\)".*/\1/')
				SYSNAME=$(echo "$info" | grep "$MIB_IDENTNAME" | sed 's/.*"\(.*\)".*/\1/')
				SYSLOCATION=$(echo "$info" | grep "$MIB_IDENTLOCATION" | sed 's/.*"\(.*\)".*/\1/')


				if [ "$SYSMODEL" != "" ] ; then
					output=$output"Avtech Model - $SYSMODEL\n"
				fi
				if [ "$SYSCONTACT" != "" ] ; then
					output=$output"Contact - $SYSCONTACT\n"
				fi
				if [ "$SYSNAME" != "" ] ; then
					output=$output"Name - $SYSNAME\n"
				fi
				if [ "$SYSLOCATION" != "" ] ; then
					output=$output"Location - $SYSLOCATION\n"
				fi
				if [ "$output" == "" ] ; then
					output="No information returned"
					intReturn=$STATE_WARNING
				fi
			fi
		;;


		temp) 
			# Check temperature sensor
			# First, build variable name from script -s and -d inputs
			if [ "$sensor_number" = "0" ] ; then # Internal sensor
				SENSOR_NAME="${MIB_PREFIX}internal-tempc.0"
			else # External sensors
				SENSOR_NAME="${MIB_PREFIX}digital-sen${sensor_number}-${TEMP_ID}.0"
			fi

			int=`snmpget $SNMPArgs $SENSOR_NAME 2> /dev/null`
			if [ "$?" != "0" ] ; then
				output=$output"CRITICAL - Problem with SNMP request, check user/password/host"
				intReturn=$STATE_CRITICAL ;

			else
				TEMP=$(echo "$int" | grep "$SENSOR_NAME" | sed 's/.*INTEGER: \(.*\).*/\1/' )

				T_high_warning_100=$(echo $((T_high_warning * 100)))
				T_high_critical_100=$(echo $((T_high_critical * 100)))

				T_low_warning_100=$(echo $((T_low_warning * 100)))
				T_low_critical_100=$(echo $((T_low_critical * 100)))

				if [ "$TEMP" != "" ] ; then
					TEMP_DEC1=$(echo "scale=1;$TEMP / 100" | bc)
					if [ "$TEMP" -le "$T_high_warning_100" ]&&[ "$TEMP" -ge "$T_low_warning_100" ]  ; then
						output="OK - Temperature: "$TEMP_DEC1"degC"
						intReturn=$STATE_OK ;

					elif [ "$TEMP" -gt "$T_high_warning_100" ]&&[ "$TEMP" -le "$T_high_critical_100" ] ; then	
						output="WARNING - Temperature above warning threshold of "$T_high_warning"degC:  Temperature="$TEMP_DEC1"degC"
						intReturn=$STATE_WARNING ;

					elif [ "$TEMP" -gt "$T_high_warning_100" ]&&[ "$TEMP" -gt "$T_high_critical_100" ] ; then
						output="CRITICAL - Temperature above critical threshold of "$T_high_critical"degC:  Temperature="$TEMP_DEC1"degC"
						intReturn=$STATE_CRITICAL ;

					elif [ "$TEMP" -lt "$T_low_warning_100" ]&&[ "$TEMP" -ge "$T_low_critical_100" ] ; then
						output="WARNING - Temperature below warning threshold of "$T_low_warning"degC:  Temperature="$TEMP_DEC1"degC"
						intReturn=$STATE_WARNING ;

					elif [ "$TEMP" -lt "$T_low_warning_100" ]&&[ "$TEMP" -lt "$T_low_critical_100" ] ; then
						output="CRITICAL - Temperature below critical threshold of "$T_low_critical"degC:  Temperature="$TEMP_DEC1"degC"
						intReturn=$STATE_CRITICAL ;

					else
						output="Warning - S32 Temperature alert thresholds are not correctly defined (must be: T_crit-low < T_warn-low < T_warn-high < T_crit-high).  Temperature="$TEMP_DEC1"degC"
						intReturn=$STATE_WARNING
					fi
				else
					output="WARNING - No 32S Internal Temperature Information Returned"
					intReturn=$STATE_WARNING
				fi
			fi
		;;

		hum)
			# Check Humidity Sensor
			# First, build variable name from script -s and -d inputs
			if [ "$sensor_number" = "0" ] ; then # Internal sensor
				SENSOR_NAME="${MIB_PREFIX}internal-humidity.0"
			else # External sensors
				SENSOR_NAME="${MIB_PREFIX}digital-sen${sensor_number}-${HUM_ID}.0"
			fi
			int=`snmpget $SNMPArgs $SENSOR_NAME 2> /dev/null`
			if [ "$?" != "0" ] ; then
				output=$output"CRITICAL - Problem with SNMP request, check user/password/host"
				intReturn=$STATE_CRITICAL ;

			else
				HUMIDITY=$(echo "$int" | grep "$SENSOR_NAME" | sed 's/.*INTEGER: \(.*\).*/\1/' )

				H_high_warning_100=$(echo $((H_high_warning * 100)))
				H_high_critical_100=$(echo $((H_high_critical * 100)))

				H_low_warning_100=$(echo $((H_low_warning * 100)))
				H_low_critical_100=$(echo $((H_low_critical * 100)))

				if [ "$HUMIDITY" != "" ] ; then
					HUMIDITY_DEC1=$(echo "scale=1;$HUMIDITY / 100" | bc)
					if [ "$HUMIDITY" -le "$H_high_warning_100" ]&&[ "$HUMIDITY" -ge "$H_low_warning_100" ]  ; then
						output="OK - Humidity: "$HUMIDITY_DEC1"%"
						intReturn=$STATE_OK ;

					elif [ "$HUMIDITY" -gt "$H_high_warning_100" ]&&[ "$HUMIDITY" -le "$H_high_critical_100" ] ; then
						output="WARNING - Humidity above warning threshold of "$H_high_warning"%:  Humidity="$HUMIDITY_DEC1"%"
						intReturn=$STATE_WARNING ;

					elif [ "$HUMIDITY" -gt "$H_high_warning_100" ]&&[ "$HUMIDITY" -gt "$H_high_critical_100" ] ; then
						output="CRITICAL - Humidity above critical threshold of "$H_high_critical"%:  Humidity="$HUMIDITY_DEC1"%"
						intReturn=$STATE_CRITICAL ;

					elif [ "$HUMIDITY" -lt "$H_low_warning_100" ]&&[ "$HUMIDITY" -ge "$H_low_critical_100" ] ; then
						output="WARNING - Humidity below warning threshold of "$H_low_warning"%:  Humidity="$HUMIDITY_DEC1"%"
						intReturn=$STATE_WARNING ;

					elif [ "$HUMIDITY" -lt "$H_low_warning_100" ]&&[ "$HUMIDITY" -lt "$H_low_critical_100" ] ; then
						output="CRITICAL - Humidity below critical threshold of "$H_low_critical"%:  Humidity="$HUMIDITY_DEC1"%"
						intReturn=$STATE_CRITICAL ;
					else	
						output="Warning - S32 Humidity alert thresholds are not correctly defined (must be: H_crit-low < H_warn-low < H_warn-high < H_crit-high).  Humidity="$HUMIDITY_DEC1"%"
						intReturn=$STATE_WARNING ;
					fi
				else
					output="WARNING - No 32S Humidity Information Returned"
					intReturn=$STATE_WARNING ;
				fi
			fi
		;;

		flood)
			SENSOR_NAME="${MIB_PREFIX}switch-sen${sensor_number}.0"
			int=`snmpget $SNMPArgs $SENSOR_NAME 2> /dev/null`
			if [ "$?" != "0" ] ; then
				output=$output"CRITICAL - Problem with SNMP request, check user/password/host"
				intReturn=$STATE_CRITICAL ;
			else
				switch_sensor_value=$(echo "$int" | grep "$SENSOR_NAME" | sed 's/.*INTEGER: \(.*\).*/\1/' )
				if [ "$switch_sensor_value" = "0" ] ; then
					output="CRITICAL - Flood Sensor $sensor_number detected water."
					intReturn=$STATE_CRITICAL ;
				elif [ "$switch_sensor_value" = "1" ] ; then
					output="OK"
					intReturn=$STATE_OK ;
				else
					output="Warning - Switch sensor value \"$switch_sensor_value\" should be \"0\" or \"1\"."
					intReturn=$STATE_WARNING ;
				fi
			fi
		;;
	esac

	echo -e $output
	exit $intReturn
fi
